import java.util.*;

class Solution {
    
    public ArrayList<String> ratInMaze(int[][] maze) {
        // code here
        int n = maze.length;
        ArrayList<String> ans=new ArrayList<>();
        move(0,0,"",ans,n-1,maze,'S');
        return ans;
    }
    
    void move(int curRow,int curCol,String str,List path,int goal,int[][] maze,char dir){
        if(curRow==goal && curCol==goal){
            path.add(str);
            return;
        }
        /*if(curRow>goal){
            return;
        }*/
        if(curCol>goal || curRow>goal || curCol<0 || curRow<0){
            return;
        }
        if(maze[curRow][curCol]==0){
            return;
        }
        maze[curRow][curCol]=0;
        
        
        /* lexicographically smallest order D<L<R<U*/
        //Down
        move(curRow+1,curCol,str+"D",path,goal,maze,'D');
        //Left
        move(curRow,curCol-1,str+"L",path,goal,maze,'L');
        //Right
        move(curRow,curCol+1,str+"R",path,goal,maze,'R');
        //Up
        move(curRow-1,curCol,str+"U",path,goal,maze,'U');
        
        maze[curRow][curCol]=1;
    }


    public static void main(String [] args){
        int [] a = {7,8,5};
        System.out.println("Input: 7,8,5 Output: "+possibleWords(a));
        int [] b = {1,2,0,3};
        System.out.println("Input: 1,2,0,3 Output: "+possibleWords(b));
        int [] c = {7,8,0};
        System.out.println("Input: 7,8,0 Output: "+possibleWords(c));
        int [] d = {2,0};
        System.out.println("Input: 2,0 Output: "+possibleWords(d));
        int [] e = {1,0};
        System.out.println("Input: 1,0 Output: "+possibleWords(e));
    }
}

/*
You are given a keypad (as shown in the diagram) and an array arr[ ] containing digits, your task is to list all possible words in any order which can be generated by pressing numbers in arr[] sequentially.

Note: Number 0 and 1 do not map to any letters.
You can return the words in any order, the driver code will print them in sorted order.



Examples :

Input: arr[] = [2, 3]
Output: [ad, ae, af, bd, be, bf, cd, ce, cf]
Explanation: When we press 2 and 3 total 3 x 3 = 9 possible words formed.
Input: arr[] = [2]
Output: [a, b, c]
Explanation: When we press 2 total 3 possible words formed.

 */